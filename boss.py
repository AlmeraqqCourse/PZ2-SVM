import abc
import random  # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
from characters import Human

class BossStrategy(abc.ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Å—Å–∞"""
    
    @abc.abstractmethod
    def execute(self, boss, targets):
        pass

class AggressiveStrategy(BossStrategy):
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –∞—Ç–∞–∫—É–µ—Ç —Å–∞–º–æ–≥–æ —Å–ª–∞–±–æ–≥–æ"""
    
    def execute(self, boss, targets):
        alive_targets = [t for t in targets if t.is_alive]
        if not alive_targets:
            return
        
        target = min(alive_targets, key=lambda x: x.hp)
        damage = boss.strength + random.randint(10, 20)
        target.hp -= damage
        print(f"üëπ {boss.name} —è—Ä–æ—Å—Ç–Ω–æ –∞—Ç–∞–∫—É–µ—Ç {target.name}! –ù–∞–Ω–µ—Å–µ–Ω–æ {damage} —É—Ä–æ–Ω–∞!")

class AOEStrategy(BossStrategy):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∞—Å—Å–æ–≤–æ–π –∞—Ç–∞–∫–∏"""
    
    def execute(self, boss, targets):
        alive_targets = [t for t in targets if t.is_alive]
        if not alive_targets:
            return
        
        damage = boss.intellect + random.randint(5, 15)
        for target in alive_targets:
            target.hp -= damage
        print(f"üíÄ {boss.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å—Å–æ–≤—É—é –∞—Ç–∞–∫—É! –í—Å–µ –ø–æ–ª—É—á–∞—é—Ç {damage} —É—Ä–æ–Ω–∞!")

class DebuffStrategy(BossStrategy):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –¥–µ–±–∞—Ñ—Ñ–æ–≤"""
    
    def execute(self, boss, targets):
        alive_targets = [t for t in targets if t.is_alive]
        if not alive_targets:
            return
        
        target = random.choice(alive_targets)
        target.effects.append({"name": "–ü—Ä–æ–∫–ª—è—Ç–∏–µ", "duration": 3, "strength_reduction": 8})
        print(f"‚ò†Ô∏è {boss.name} –ø—Ä–æ–∫–ª–∏–Ω–∞–µ—Ç {target.name}! –°–∏–ª–∞ —É–º–µ–Ω—å—à–µ–Ω–∞!")

class Boss(Human):
    """–ö–ª–∞—Å—Å –±–æ—Å—Å–∞ —Å –º–µ–Ω—è—é—â–∏–º–∏—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    def __init__(self, name, level=10):
        super().__init__(name, level)
        self.hp = 500
        self.mp = 200
        self.strength = 30
        self.agility = 15
        self.intellect = 25
        self.strategies = {
            "aggressive": AggressiveStrategy(),
            "aoe": AOEStrategy(),
            "debuff": DebuffStrategy()
        }
        self.current_strategy = "aggressive"
    
    def take_turn(self, targets):
        """–ë–æ—Å—Å –¥–µ–ª–∞–µ—Ç —Ö–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        # –ú–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç HP
        hp_percent = self.hp / self.max_hp
        
        if hp_percent < 0.3:  # –§–∞–∑–∞ —è—Ä–æ—Å—Ç–∏
            self.current_strategy = "aggressive"
        elif hp_percent < 0.6:  # –§–∞–∑–∞ –º–∞—Å—Å–æ–≤—ã—Ö –∞—Ç–∞–∫
            self.current_strategy = "aoe"
        else:  # –§–∞–∑–∞ –¥–µ–±–∞—Ñ—Ñ–æ–≤
            self.current_strategy = "debuff"
        
        strategy = self.strategies[self.current_strategy]
        strategy.execute(self, targets)
    
    @property
    def max_hp(self):
        return 500 + (self.level - 10) * 50