import random
from effects import EffectSystem

class TurnOrder:
    """–ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–æ–≤"""
    
    def __init__(self, party, boss):
        self.party = party
        self.boss = boss
        self.current_turn = 0
    
    def __iter__(self):
        return self
    
    def __next__(self):
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ—è
        all_combatants = self.party + [self.boss]
        alive_combatants = [c for c in all_combatants if c.is_alive]
        
        if not alive_combatants:
            raise StopIteration
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª–æ–≤–∫–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–æ–≤
        alive_combatants.sort(key=lambda x: x.agility, reverse=True)
        
        if self.current_turn >= len(alive_combatants):
            self.current_turn = 0
        
        next_combatant = alive_combatants[self.current_turn]
        self.current_turn += 1
        
        return next_combatant

class Battle:
    """–ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–µ–º"""
    
    def __init__(self, party, boss):
        self.party = party
        self.boss = boss
        self.turn_order = TurnOrder(party, boss)
        self.round = 1
    
    def start_battle(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ–π"""
        print("\n" + "="*50)
        print("üö® –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –ë–û–ô! üö®")
        print("="*50)
        
        while any(member.is_alive for member in self.party) and self.boss.is_alive:
            print(f"\n--- –†–∞—É–Ω–¥ {self.round} ---")
            
            for combatant in self.turn_order:
                if not combatant.is_alive:
                    continue
                
                if combatant == self.boss:
                    self._boss_turn()
                else:
                    self._player_turn(combatant)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –±–æ—è
                if not self.boss.is_alive or not any(member.is_alive for member in self.party):
                    break
            
            self._end_round()
            self.round += 1
        
        self._end_battle()
    
    def _player_turn(self, player):
        """–•–æ–¥ –∏–≥—Ä–æ–∫–∞"""
        print(f"\nüéØ –•–æ–¥ {player.name}:")
        print(f"HP: {player.hp}/{player.max_hp} | MP: {player.mp}/{player.max_mp}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions = ["1. –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞", "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫"]
        if any(item.type == "consumable" for item in player.inventory):
            actions.append("3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        
        print(" | ".join(actions))
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
        
        if choice == "1":
            self._basic_attack(player)
        elif choice == "2":
            self._use_skill(player)
        elif choice == "3" and "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç" in actions:
            self._use_item(player)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞.")
    
    def _basic_attack(self, player):
        """–ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞"""
        damage = player.basic_attack(self.boss)
        actual_damage = EffectSystem.calculate_damage_with_effects(player, self.boss, damage)
        self.boss.hp -= actual_damage
    
    def _use_skill(self, player):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –∏–≥—Ä–æ–∫–æ–º"""
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:")
        for i, skill in enumerate(player.skills, 1):
            cooldown_info = f" [–ö–î: {player.cooldowns.get(skill['name'], 0)}]" if skill['name'] in player.cooldowns else ""
            print(f"{i}. {skill['name']} (–ú–∞–Ω–∞: {skill['mp_cost']}){cooldown_info}")
        
        try:
            choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫: ")) - 1
            if 0 <= choice < len(player.skills):
                skill = player.skills[choice]
                player.use_skill(skill["name"], self.boss, self.party)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    def _use_item(self, player):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        consumables = [item for item in player.inventory if item.type == "consumable"]
        if not consumables:
            print("‚ùå –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥—É–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!")
            return
        
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:")
        for i, item in enumerate(consumables, 1):
            print(f"{i}. {item.name}")
        
        try:
            choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: ")) - 1
            if 0 <= choice < len(consumables):
                item = consumables[choice]
                if item.use(player):
                    player.inventory.remove(item)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    def _boss_turn(self):
        """–•–æ–¥ –±–æ—Å—Å–∞"""
        print(f"\nüëπ –•–æ–¥ {self.boss.name}:")
        alive_party = [member for member in self.party if member.is_alive]
        self.boss.take_turn(alive_party)
    
    def _end_round(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
        for member in self.party:
            if member.is_alive:
                member.update_cooldowns()
                EffectSystem.apply_effects(member)
        
        EffectSystem.apply_effects(self.boss)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Ä–∞—É–Ω–¥–∞ {self.round}:")
        for member in self.party:
            status = "üíö" if member.is_alive else "üíÄ"
            print(f"{status} {member.name}: HP {member.hp}/{member.max_hp}")
        print(f"üëπ {self.boss.name}: HP {self.boss.hp}/{self.boss.max_hp}")
    
    def _end_battle(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—è"""
        print("\n" + "="*50)
        if not self.boss.is_alive:
            print("üéâ –ü–û–ë–ï–î–ê! –ë–æ—Å—Å –ø–æ–≤–µ—Ä–∂–µ–Ω!")
            print("üíé –ì–µ—Ä–æ–∏ –ø–æ–ª—É—á–∞—é—Ç —Å–æ–∫—Ä–æ–≤–∏—â–∞ –∏ —Å–ª–∞–≤—É!")
        else:
            print("üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï... –ë–æ—Å—Å –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ.")
        print("="*50)